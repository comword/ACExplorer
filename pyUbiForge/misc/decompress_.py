from ctypes import CDLL, c_ushort
import os
import platform
import zstandard
if platform.architecture()[0] == '64bit':
	lzoPath = f'{os.path.dirname(__file__)}/../resources/lzo64.dll'
elif platform.architecture()[0] == '32bit':
	lzoPath = f'{os.path.dirname(__file__)}/../resources/lzo32.dll'
else:
	raise Exception('Unknown Architecture')

lzo = CDLL(lzoPath)

lzo1x = {0, 1}


def decompress(mode: int, src: bytes, dst_len: int) -> bytes:
	"""This is the function that does the actual decompression of the data"""
	src_len = len(src)
	if src_len == dst_len:
		return src
	dst = b'\x00' * dst_len
	src_len_c = (c_ushort*1)(src_len)
	dst_len_c = (c_ushort*1)(dst_len)
	if mode in lzo1x:
		# lzo1x
		lzo.lzo1x_decompress(src, src_len_c, dst, dst_len_c, None)
	elif mode == 2:
		# lzo2a
		lzo.lzo2a_decompress(src, src_len_c, dst, dst_len_c, None)
	elif mode == 5:
		# lzo1c
		lzo.lzo1c_decompress(src, src_len_c, dst, dst_len_c, None)
	else:
		raise Exception(f'Decompression Mode "{mode}" is not supported')
	return dst


if __name__ == '__main__':
	test_input = b'G^A\x84\t\xf0\x05\x00\x00#\x00\x00\x00AC_106_Spawn_ToyGuard_Protector_003\x00\x01-K\x8e\x9c\x14P\x05`\x07\x07\x03\xe0\xb3]\xbf\xdd\xff\xff>\x00\xc0\x00M\x01\xbem\x02\x00/\x02\x00\x80?t\x00\x05\x1c\xf7G\xc2ym;D\xbf\x01\x80?\x02r\x02\x01.\xc8\n\x02cjV\x1d\x01]\x010\xdc\x01\x03w8\xf3\xc5\x001\xd0\x01\x04\xde\xc1\xe6g\x01\x002\xd4\x01\x02N\xcd\x9a\\\x01\x91\x073\xc4\x02\x03V\x84f\xfc\x004\xd0\x01\x02\xcc,\x88h\x04t\x03i\x045\xd0\x02\x01\r\xbco\x0b}\x01\x03\xa0\x12+\x90\x02\x05\xff\xff\x7f?\xff\xff\x9f\xb3\xfd\x01\x03(h\x00\x8d\x086\xcc\x08\x02\x00V\xd0\x947\xcc\x01\x02ES\xbd\x11\x01)\x0c\x01\x05\x8ei2\xb3\x8fj<(l\x01\x01\xf5\x00\xb1Wd\x1e\x03\xaf@\x16\x9f\x03\x008\x01\x00\x03(q\x008\xd8\n\x01k\x87\x1f\x9f)\x7f\x00\x03\x019\xc0\x03\x01J\xd3\x1c\x9ey\x05:\xdc\x01\x02-\xe5\xe4\xf7\x00 \x0f\x01\x00\xff\xc0\x00\x02\x03\x00ff\xe6F\x14\xc0@\x0e\x00 A\xad\x00\x00L\x01\xa0\x01)\xe7\x03\x00\x00`\x99\x02B\x0f\x00pB3\x00\x00\x02?\xc3\xb82>/Y\x01\xa0\xba\x08\x01\x02\xd0=\x01\x92\n\x86>(j\x03\x01;\xc8\x16\x01\x1c\xa3\xb1\xc2y\x02f\x03\x00?\x01\tA\x01\xf6\xdc$\x02"\xb8yE\x00\xa0\x03+\\\x06j\x10\x16\x01(\x8c\x00`\x07*\x8c\x00|\x03m\x0e\x18+\x8e\x00\xe6\xbeL\x00/\x11\n\x19,\x8d\x00>*\x8c\x00\xfd8\x1a-\xad\x01\xcc\x05\x92\xc0.M\x08\x1b-\xac\x01*\x8d\x00\x02\xde\x00\x1c\x01/\\\x03\'\x8d\x00\x05\xdd\x00\x1e0\\\x03\'\x8d\x00\x04\xdd\x00\x1f-\x1c\x01.(\x07\x9d\rN\xd4+\x01\xdc\xabX\xfa\'1\x03\x02\xee.\x00O\xc0\x01\x023\xbd\xd9\x93\x02\x9d\x18P\xc4\x02\x017\x12u\xea\x91\x05Q\xc0\x02\x01\xcbg\xf7\x11\xba\x07\x01R\xc8\x02\x02\xe5t/>\x01,D\x0c2\x18\x0b\x9a\x03\x01S\xd1\x06t\x07\xc2O\x01T*1\x00U*1\x00!\xd4\x1a\x91\x01#*1\x00V*\x99\x00W*1\x00X*1\x00Y*1\x00Z*1\x00[*1\x00\\)0\x00\xb9</\xc4\x02\x02\xf7\x18\xbc\x92\x01,\x0c\x03d\x8fa\x00\x00/X\x00\x8c-uZ]\xd4\x07\x01v4\xecJ2x\x13*$\t`\x00\x01\x9e\x1a\x12`9\xd4\x04\x01n@\x1d\xdb\x81\x01^\xdc\n\x01>t\x13se?<\xc6I\x01A\xf4\xad\x02\xde\t\x93)\x01\'\xa0\x14\x04\x8a\x1a\xc8\xcf\x01\x01/+4\x00\xe4\x05\x021\x81C\xb0G\xdc\x07\xd9\xb3\xbe\xe8\xafh\xb5\xf8\xb3\xb8\xb0*\xfe\x02\x80?.L\x03P!\x11\x00\x00'
	test_output = b'^A\x84\t\xf0\x05\x00\x00#\x00\x00\x00AC_106_Spawn_ToyGuard_Protector_003\x00\x01-K\x8e\x9c\x14\x00\x00\x00^A\x84\t\x03\xe0\xb3]\xbf\xdd\xff\xff>\x00\x00\x00\x00\x00\x00\x00\x00\xdd\xff\xff\xbe\xe0\xb3]\xbf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x1c\xf7G\xc2ym;D\x00\x00\x80?\x00\x00\x80?\x02\x00\x00\x00\x00\x01.K\x8e\x9c\x14\x00\x00\x00cjV\x1d\x01\x00\x00\x010K\x8e\x9c\x14\x00\x00\x00w8\xf3\xc5\x001K\x8e\x9c\x14\x00\x00\x00\xde\xc1\xe6g\x01\x002K\x8e\x9c\x14\x00\x00\x00N\xcd\x9a\\\x01\x00\x00\x00\x00\x013K\x8e\x9c\x14\x00\x00\x00V\x84f\xfc\x004K\x8e\x9c\x14\x00\x00\x00\xcc,\x88h\x04\x00\x00\x00\x01\x00\x00\x00\x005K\x8e\x9c\x14\x00\x00\x00\r\xbco\x0b\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x80\xbf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x7f?\xff\xff\x9f\xb3\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x006K\x8e\x9c\x14\x00\x00\x00\x00V\xd0\x947K\x8e\x9c\x14\x00\x00\x00ES\xbd\x11\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8ei2\xb3\x8fj<(\x00\x00\x00\x00\xf5\x00\xb1W?\x00\x00\x00\xaf@\x16\x9f\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x03\x00\x00\x00\x00\x00\x00\x00\x00\x008K\x8e\x9c\x14\x00\x00\x00k\x87\x1f\x9f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x03\x03\x019K\x8e\x9c\x14\x00\x00\x00J\xd3\x1c\x9e\x03\x00\x00\x00:K\x8e\x9c\x14\x00\x00\x00-\xe5\xe4\xf7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x03\x00ff\xe6?\x00\x00\xc0@\x00\x00 A\x00\x00 A\x00\x00\x00@\x00\x00\x00 A\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00`@\x00\x00\x00 B\x00\x00pB333?\xc3\xb82>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0@\x00\x00 A\x00\x01\x02\x00\x00\x00\x00\x00\x80?\x92\n\x86>\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01;K\x8e\x9c\x14\x00\x00\x00\x1c\xa3\xb1\xc2\x03\x00\x00\x00fff?\x01\t\x00\x00\x00\xf6\x00\xb1W?\x00\x00\x00"\xb8yE\x00\x00\x00\x00fff\xbf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x16\x01\xb1W?\x00\x00\x00"\xb8yEfff?fff\xbf\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x18\x01\xb1W?\x00\x00\x00"\xb8yEff\xe6\xbeff\xe6\xbf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x19\x01\xb1W?\x00\x00\x00"\xb8yEff\xe6>ff\xe6\xbf\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x1a\x01\xb1W?\x00\x00\x00"\xb8yEfff?\xcc\xcc,\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x1b\x01\xb1W?\x00\x00\x00"\xb8yEff\xe6\xbe\xcc\xcc,\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x1c\x01\xb1W?\x00\x00\x00"\xb8yE\x00\x00\x00\x00fff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x1e\x01\xb1W?\x00\x00\x00"\xb8yEfff?fff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x1f\x01\xb1W?\x00\x00\x00"\xb8yE\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x02\x00\x00\x00\x00NK\x8e\x9c\x14\x00\x00\x00\xdc\xabX\xfa\x00\x00\x00\x00\x01\x00\x00\x00\x00\x02;K\x8e\x9c\x14\x00\x00\x00\x00OK\x8e\x9c\x14\x00\x00\x003\xbd\xd9\x93\x02\x00\x00\x00\x03\x00PK\x8e\x9c\x14\x00\x00\x007\x12u\xea\x01\x00\x00\x00\x00QK\x8e\x9c\x14\x00\x00\x00\xcbg\xf7\x11\x00\x01\x00\x00\x00\x00\x01RK\x8e\x9c\x14\x00\x00\x00\xe5t/>\x01\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x03\x03\x00\x00\x00\x00\x01SK\x8e\x9c\x14\x00\x00\x00t2\xb3O\x01TK\x8e\x9c\x14\x00\x00\x00t2\xb3O\x01UK\x8e\x9c\x14\x00\x00\x00t2\xb3O\x01!\x01\xb1W?\x00\x00\x00t2\xb3O\x01#\x01\xb1W?\x00\x00\x00t2\xb3O\x01VK\x8e\x9c\x14\x00\x00\x00t2\xb3O\x01WK\x8e\x9c\x14\x00\x00\x00t2\xb3O\x01XK\x8e\x9c\x14\x00\x00\x00t2\xb3O\x01YK\x8e\x9c\x14\x00\x00\x00t2\xb3O\x01ZK\x8e\x9c\x14\x00\x00\x00t2\xb3O\x01[K\x8e\x9c\x14\x00\x00\x00t2\xb3O\x01\\K\x8e\x9c\x14\x00\x00\x00t2\xb3O\x00\x00\x00\x00\x00\x01/K\x8e\x9c\x14\x00\x00\x00\xf7\x18\xbc\x92\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\xff\xff\x00\x00\x80?]K\x8e\x9c\x14\x00\x00\x00v4\xecJ\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9e\x1a\x12`\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00n@\x1d\xdb\x00\x00\x00\x00\x00^K\x8e\x9c\x14\x00\x00\x00>t\x13s\x04\x00\x00\x00<\x00\x00\x00\x02\x00\x00\x00\x01A-K\x8e\x9c\x14\x00\x00\x00\xde\t\x93)\x01\x01.K\x8e\x9c\x14\x00\x00\x00\x8a\x1a\xc8\xcf\x01\x01/K\x8e\x9c\x14\x00\x00\x00\x8a\x1a\xc8\xcf\x01\x01-K\x8e\x9c\x14\x00\x00\x001\x81C\xb0G\x00\x00\x00\x02\x00\x00\x00\xe0\xb3]\xbf\xdd\xff\xff\xbe\x00\x00\x00\x00\x1c\xf7G\xc2\xdd\xff\xff>\xe0\xb3]\xbf\x00\x00\x00\x00ym;D\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x01\x01\x00'
	result = decompress(1, test_input, 1568)
	assert result == test_output

	import time
	t = time.time()
	for _ in range(1000000):
		decompress(1, test_input, 1568)
	print(time.time()-t)
